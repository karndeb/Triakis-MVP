{
  "version": 3,
  "sources": ["../../react-is/cjs/react-is.development.js", "../../react-is/index.js", "../../hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js", "../../flatbuffers/js/flatbuffers.mjs", "../../text-encoding-utf-8/src/encoding.js", "../../apache-arrow/util/util/utf8.ts", "../../apache-arrow/io/io/interfaces.ts", "../../apache-arrow/util/util/compat.ts", "../../apache-arrow/util/util/buffer.ts", "../../apache-arrow/io/io/adapters.ts", "../../apache-arrow/vector.ts", "../../apache-arrow/fb/fb/Schema.ts", "../../apache-arrow/fb/fb/Message.ts", "../../apache-arrow/enum.ts", "../../apache-arrow/util/util/bit.ts", "../../apache-arrow/visitor.ts", "../../apache-arrow/visitor/visitor/typecomparator.ts", "../../apache-arrow/type.ts", "../../apache-arrow/data.ts", "../../apache-arrow/util/util/pretty.ts", "../../apache-arrow/builder/builder/valid.ts", "../../apache-arrow/builder/builder/buffer.ts", "../../apache-arrow/builder.ts", "../../apache-arrow/builder/builder/bool.ts", "../../apache-arrow/builder/builder/null.ts", "../../apache-arrow/builder/builder/date.ts", "../../apache-arrow/builder/builder/decimal.ts", "../../apache-arrow/builder/builder/dictionary.ts", "../../apache-arrow/builder/builder/fixedsizebinary.ts", "../../apache-arrow/util/util/math.ts", "../../apache-arrow/builder/builder/float.ts", "../../apache-arrow/util/util/bn.ts", "../../apache-arrow/builder/builder/int.ts", "../../apache-arrow/builder/builder/time.ts", "../../apache-arrow/builder/builder/timestamp.ts", "../../apache-arrow/builder/builder/interval.ts", "../../apache-arrow/builder/builder/binary.ts", "../../apache-arrow/builder/builder/utf8.ts", "../../apache-arrow/builder/builder/run.ts", "../../apache-arrow/vector/vector/row.ts", "../../apache-arrow/util/util/vector.ts", "../../apache-arrow/vector/vector/chunked.ts", "../../apache-arrow/column.ts", "../../apache-arrow/util/util/args.ts", "../../apache-arrow/schema.ts", "../../apache-arrow/builder/builder/list.ts", "../../apache-arrow/builder/builder/fixedsizelist.ts", "../../apache-arrow/builder/builder/map.ts", "../../apache-arrow/builder/builder/struct.ts", "../../apache-arrow/builder/builder/union.ts", "../../apache-arrow/visitor/visitor/set.ts", "../../apache-arrow/visitor/visitor/builderctor.ts", "../../apache-arrow/builder/builder/index.ts", "../../apache-arrow/fb/fb/File.ts", "../../apache-arrow/ipc/metadata/ipc/metadata/file.ts", "../../apache-arrow/io/io/stream.ts", "../../apache-arrow/io/io/file.ts", "../../apache-arrow/util/util/int.ts", "../../apache-arrow/visitor/visitor/vectorloader.ts", "../../apache-arrow/visitor/visitor/typeassembler.ts", "../../apache-arrow/ipc/metadata/ipc/metadata/json.ts", "../../apache-arrow/ipc/metadata/ipc/metadata/message.ts", "../../apache-arrow/ipc/ipc/message.ts", "../../apache-arrow/visitor/visitor/vectorassembler.ts", "../../apache-arrow/visitor/visitor/jsontypeassembler.ts", "../../apache-arrow/visitor/visitor/jsonvectorassembler.ts", "../../apache-arrow/ipc/ipc/writer.ts", "../../apache-arrow/util/util/recordbatch.ts", "../../apache-arrow/vector/vector/base.ts", "../../apache-arrow/vector/vector/binary.ts", "../../apache-arrow/vector/vector/bool.ts", "../../apache-arrow/vector/vector/date.ts", "../../apache-arrow/vector/vector/decimal.ts", "../../apache-arrow/vector/vector/dictionary.ts", "../../apache-arrow/vector/vector/fixedsizebinary.ts", "../../apache-arrow/vector/vector/fixedsizelist.ts", "../../apache-arrow/vector/vector/float.ts", "../../apache-arrow/vector/vector/interval.ts", "../../apache-arrow/vector/vector/int.ts", "../../apache-arrow/vector/vector/list.ts", "../../apache-arrow/vector/vector/map.ts", "../../apache-arrow/vector/vector/null.ts", "../../apache-arrow/vector/vector/struct.ts", "../../apache-arrow/vector/vector/timestamp.ts", "../../apache-arrow/vector/vector/time.ts", "../../apache-arrow/vector/vector/union.ts", "../../apache-arrow/vector/vector/utf8.ts", "../../apache-arrow/util/util/fn.ts", "../../apache-arrow/visitor/visitor/get.ts", "../../apache-arrow/visitor/visitor/indexof.ts", "../../apache-arrow/visitor/visitor/iterator.ts", "../../apache-arrow/visitor/visitor/toarray.ts", "../../apache-arrow/visitor/visitor/bytewidth.ts", "../../apache-arrow/visitor/visitor/vectorctor.ts", "../../apache-arrow/vector/vector/index.ts", "../../apache-arrow/table.ts", "../../apache-arrow/recordbatch.ts", "../../apache-arrow/ipc/ipc/reader.ts", "../../apache-arrow/io/whatwg/io/whatwg/iterable.ts", "../../apache-arrow/io/whatwg/io/whatwg/builder.ts", "../../apache-arrow/io/whatwg/io/whatwg/reader.ts", "../../apache-arrow/io/whatwg/io/whatwg/writer.ts", "../../apache-arrow/compute/compute/predicate.ts", "../../apache-arrow/compute/compute/dataframe.ts", "../../apache-arrow/Arrow.ts", "../../streamlit-component-lib/dist/StreamlitReact.js", "../../event-target-shim/src/event.mjs", "../../event-target-shim/src/event-target.mjs", "../../apache-arrow/Arrow.dom.ts", "../../streamlit-component-lib/dist/ArrowTable.js", "../../streamlit-component-lib/dist/streamlit.js"],
  "sourcesContent": ["/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\nvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_ASYNC_MODE_TYPE:\n          case REACT_CONCURRENT_MODE_TYPE:\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n} // AsyncMode is deprecated along with isAsyncMode\n\nvar AsyncMode = REACT_ASYNC_MODE_TYPE;\nvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n    }\n  }\n\n  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n}\nfunction isConcurrentMode(object) {\n  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.AsyncMode = AsyncMode;\nexports.ConcurrentMode = ConcurrentMode;\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n", "'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n", "/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n", "'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 \u2264 c \u2264 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 \u2264 c \u2264 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n\u22121, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n\u22121:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 \u2264 d \u2264 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // \u2212 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte \u2212 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte \u2212 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 \u00D7 utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte \u2212 0x80) << (6 \u00D7 (utf-8 bytes\n    // needed \u2212 utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 \u00D7 count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 \u00D7 (count \u2212 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends AbstractVector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends AbstractVector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly byteLength: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nexport { AbstractVector as Vector };\n", "/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n", "// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    /** The default placeholder type */\n    NONE            =  0,\n    /** A NULL type having no physical storage */\n    Null            =  1,\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Int             =  2,\n    /** 2, 4, or 8-byte floating point value */\n    Float           =  3,\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Binary          =  4,\n    /** UTF8 variable-length string as List<Char> */\n    Utf8            =  5,\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Bool            =  6,\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Decimal         =  7,\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Date            =  8,\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Time            =  9,\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Timestamp       = 10,\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Interval        = 11,\n    /** A list of some logical data type */\n    List            = 12,\n    /** Struct of logical types */\n    Struct          = 13,\n    /** Union of logical types */\n    Union           = 14,\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeBinary = 15,\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    FixedSizeList   = 16,\n    /** Map of named logical types */\n    Map             = 17,\n\n    /** Dictionary aka Category type */\n    Dictionary            = -1,\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey, value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughAsyncIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { BitmapBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { Builder } from '../builder';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) {}\n    public setValid(index: number, valid: boolean) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Date_, DateDay, DateMillisecond } from '../type';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h: number) {\n    let expo = (h & 0x7C00) >> 10;\n    let sigf = (h & 0x03FF) / 1024;\n    let sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\n\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d: number) {\n\n    if (d !== d) { return 0x7E00; } // NaN\n\n    f64[0] = d;\n\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n\n    let sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\n\n    if (expo >= 0x40f00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        } else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000fffff) >> 10;\n        }\n    } else if (expo <= 0x3f000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3f000000) >> 10;\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\n    }\n\n    return sign | expo | sigf & 0xFFFF;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { float64ToUint16 } from '../util/math';\nimport { FixedWidthBuilder } from '../builder';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\n    public setValue(index: number, value: number) {\n        // convert JS float64 to a uint16\n        this._values.set(index, float64ToUint16(value));\n    }\n}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\n\n/** @ignore */\nexport class Run<T extends DataType = any, TNull = any> {\n    // @ts-ignore\n    protected _values: ArrayLike<T['TValue'] | TNull>;\n    public get length() { return this._values.length; }\n    public get(index: number) { return this._values[index]; }\n    public clear() { this._values = <any> null; return this; }\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\n        if (values instanceof Vector) {\n            return values;\n        }\n        this._values = values;\n        return this as any;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { StructVector } from './struct';\nimport { valueToString } from '../util/pretty';\nimport { DataType, Struct, RowLike } from '../type';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n\n    public readonly size: number;\n    public readonly [Symbol.toStringTag]: string;\n\n    protected [kRowIndex]: number;\n    protected [kParent]: Vector<Struct>;\n    protected [kKeyToIdx]: Map<K, number>;\n    protected [kIdxToVal]: V[];\n\n    constructor(parent: Vector<Struct>, numKeys: number) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n\n    public abstract keys(): IterableIterator<K>;\n    public abstract values(): IterableIterator<V>;\n    public abstract getKey(idx: number): K;\n    public abstract getIndex(key: K): number;\n    public abstract getValue(idx: number): V;\n    public abstract setValue(idx: number, val: V): void;\n\n    public entries() { return this[Symbol.iterator](); }\n\n    public has(key: K) { return this.get(key) !== undefined; }\n\n    public get(key: K) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            } else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n\n    public set(key: K, val: V) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = <any> this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n\n    public toArray() { return [...this.values()]; }\n    public toJSON() {\n        const obj = {} as any;\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n\n    public inspect() { return this.toString(); }\n    public [kCustomInspect]() { return this.toString(); }\n    public toString() {\n        const str: string[] = [];\n        this.forEach((val, key) => {\n            key = valueToString(key);\n            val = valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\n        Object.defineProperties(proto, {\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n        });\n        return (proto as any)[Symbol.toStringTag] = 'Row';\n    })(Row.prototype);\n}\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    public keys() {\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\n    }\n    public values() {\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\n    }\n    public getKey(idx: number): K['TValue'] {\n        return this[kParent].getChildAt(0)!.get(idx);\n    }\n    public getIndex(key: K['TValue']): number {\n        return this[kParent].getChildAt(0)!.indexOf(key);\n    }\n    public getValue(index: number): V['TValue'] | null {\n        return this[kParent].getChildAt(1)!.get(index);\n    }\n    public setValue(index: number, value: V['TValue'] | null): void {\n        this[kParent].getChildAt(1)!.set(index, value);\n    }\n}\n\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n    constructor(parent: StructVector<T>) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    public *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name as keyof T;\n        }\n    }\n    public *values() {\n        for (const field of this[kParent].type.children) {\n            yield (this as RowLike<T>)[field.name];\n        }\n    }\n    public getKey(idx: number): keyof T {\n        return this[kParent].type.children[idx].name as keyof T;\n    }\n    public getIndex(key: keyof T): number {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    public getValue(index: number): T[keyof T]['TValue'] | null {\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n    }\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n    }\n}\n\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n    return <T extends Row>(row: T) => {\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key: any) => function(this: T) { return this.get(key); };\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler: ProxyHandler<Row> = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row: Row, key: PropertyKey) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row: Row, key: PropertyKey, receiver: any) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\n            switch (key) {\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\n})();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { MapRow, StructRow } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) { return creatMapComparator(search); }\n    // Compare Array-likes\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\n    // Compare Vectors\n    if (search instanceof Vector) { return createVectorComparator(search); }\n    // Compare non-empty Objects\n    return createObjectComparator(search);\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction creatMapComparator(lhs: Map<any, any>) {\n    let i = -1;\n    const comparators = [] as ((x: any) => boolean)[];\n    lhs.forEach((v) => comparators[++i] = createElementComparator(v));\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createVectorComparator(lhs: Vector<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createObjectComparator(lhs: any) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (keys.length === 0) { return () => false; }\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\n\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\n    return (rhs: any) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n            case MapRow:\n            case StructRow:\n                return compareObject(comparators, rhs, rhs.keys());\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\n\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\n    const n = comparators.length;\n    if (arr.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) { return false; }\n    }\n    return true;\n}\n\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\n    const n = comparators.length;\n    if (vec.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) { return false; }\n    }\n    return true;\n}\n\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\n\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n\n    let i = 0;\n    let n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\n         ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    public setValue(index: number, value: T['TValue']) {\n        super.setValue(index, this._run.bind(value));\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n", "// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Footer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Footer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Footer= obj\n         * @returns Footer\n         */\n        static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.Schema= obj\n         * @returns org.apache.arrow.flatbuf.Schema|null\n         */\n        schema(obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Schema): NS7624605610262437867.org.apache.arrow.flatbuf.Schema | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        dictionariesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        recordBatchesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFooter(builder: flatbuffers.Builder) {\n            builder.startObject(4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset schemaOffset\n         */\n        static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, schemaOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionariesOffset\n         */\n        static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, dictionariesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset recordBatchesOffset\n         */\n        static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, recordBatchesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createFooter(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Footer.startFooter(builder);\n            Footer.addVersion(builder, version);\n            Footer.addSchema(builder, schemaOffset);\n            Footer.addDictionaries(builder, dictionariesOffset);\n            Footer.addRecordBatches(builder, recordBatchesOffset);\n            return Footer.endFooter(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Block {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Block\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * Index to the start of the RecordBlock (note this is past the Message header)\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * Length of the metadata\n         *\n         * @returns number\n         */\n        metaDataLength(): number {\n            return this.bb!.readInt32(this.bb_pos + 8);\n        }\n\n        /**\n         * Length of the data (this is aligned so there can be a gap between this and\n         * the metatdata).\n         *\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 16);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param number metaDataLength\n         * @param flatbuffers.Long bodyLength\n         * @returns flatbuffers.Offset\n         */\n        static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 24);\n            builder.writeInt64(bodyLength);\n            builder.pad(4);\n            builder.writeInt32(metaDataLength);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new Null();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\n/** @ignore */\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: V<T>): { };\n    visitBool                 <T extends Bool>            (vector: V<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: V<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: V<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: V<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: V<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: V<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: V<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: V<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: V<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: V<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: V<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: V<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: V<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: V<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: V<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\n/** @ignore */\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, TNull> | VectorBuilderOptionsAsync<Bool, TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class DecimalVector extends BaseVector<Decimal> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\n/** @ignore */\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\n/** @ignore */\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\n/** @ignore */\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\n/** @ignore */\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child!.slice(begin, end));\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class NullVector extends BaseVector<Null> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    // @ts-ignore\n    private _row: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\n/** @ignore */\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\n/** @ignore */\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\n/** @ignore */\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\n/** @ignore */\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\n/** @ignore */\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\n/** @ignore */\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\n/** @ignore */\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\n/** @ignore */\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\n/** @ignore */\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\n\n/** @ignore */\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\n/** @ignore */\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, TNull> | VectorBuilderOptionsAsync<Utf8, TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nexport function partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): T['TArray'];\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\n}\n\n/** @ignore */\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n", "/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Visitor } from './visitor';\nexport { Schema, Field } from './schema';\nexport {\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport {\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './builder/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_bn_ from './util/bn';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_math_ from './util/math';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\n/** @ignore */\nexport const util = {\n    ...util_bn_,\n    ...util_int_,\n    ...util_bit_,\n    ...util_math_,\n    ...util_buffer_,\n    ...util_vector_\n};\n", "/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport React from \"react\";\nimport { Streamlit } from \"./streamlit\";\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nvar StreamlitComponentBase = /** @class */ (function (_super) {\n    __extends(StreamlitComponentBase, _super);\n    function StreamlitComponentBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StreamlitComponentBase.prototype.componentDidMount = function () {\n        // After we're rendered for the first time, tell Streamlit that our height\n        // has changed.\n        Streamlit.setFrameHeight();\n    };\n    StreamlitComponentBase.prototype.componentDidUpdate = function () {\n        // After we're updated, tell Streamlit that our height may have changed.\n        Streamlit.setFrameHeight();\n    };\n    return StreamlitComponentBase;\n}(React.PureComponent));\nexport { StreamlitComponentBase };\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(WrappedComponent) {\n    var ComponentWrapper = /** @class */ (function (_super) {\n        __extends(ComponentWrapper, _super);\n        function ComponentWrapper(props) {\n            var _this = _super.call(this, props) || this;\n            _this.componentDidMount = function () {\n                // Set up event listeners, and signal to Streamlit that we're ready.\n                // We won't render the component until we receive the first RENDER_EVENT.\n                Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n                Streamlit.setComponentReady();\n            };\n            _this.componentDidUpdate = function () {\n                // If our child threw an error, we display it in render(). In this\n                // case, the child won't be mounted and therefore won't call\n                // `setFrameHeight` on its own. We do it here so that the rendered\n                // error will be visible.\n                if (_this.state.componentError != null) {\n                    Streamlit.setFrameHeight();\n                }\n            };\n            _this.componentWillUnmount = function () {\n                Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n            };\n            /**\n             * Streamlit is telling this component to redraw.\n             * We save the render data in State, so that it can be passed to the\n             * component in our own render() function.\n             */\n            _this.onRenderEvent = function (event) {\n                // Update our state with the newest render data\n                var renderEvent = event;\n                _this.setState({ renderData: renderEvent.detail });\n            };\n            _this.render = function () {\n                // If our wrapped component threw an error, display it.\n                if (_this.state.componentError != null) {\n                    return (React.createElement(\"div\", null,\n                        React.createElement(\"h1\", null, \"Component Error\"),\n                        React.createElement(\"span\", null, _this.state.componentError.message)));\n                }\n                // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n                if (_this.state.renderData == null) {\n                    return null;\n                }\n                return (React.createElement(WrappedComponent, { width: window.innerWidth, disabled: _this.state.renderData.disabled, args: _this.state.renderData.args, theme: _this.state.renderData.theme }));\n            };\n            _this.state = {\n                renderData: undefined,\n                componentError: undefined\n            };\n            return _this;\n        }\n        /**\n         * Error boundary function. This will be called if our wrapped\n         * component throws an error. We store the caught error in our state,\n         * and display it in the next render().\n         */\n        ComponentWrapper.getDerivedStateFromError = function (error) {\n            return { componentError: error };\n        };\n        return ComponentWrapper;\n    }(React.PureComponent));\n    return hoistNonReactStatics(ComponentWrapper, WrappedComponent);\n}\n", "/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap()\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap()\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event)\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    )\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            )\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault()\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    })\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true })\n\n    // Define accessors\n    const keys = Object.keys(event)\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key))\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation()\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        data.immediateStopped = true\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation()\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this))\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this))\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype)\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event)\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto)\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event)\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    })\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key)\n            const isFunc = typeof descriptor.value === \"function\"\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            )\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto)\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto)\n        wrappers.set(proto, wrapper)\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nexport function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event))\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nexport function isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nexport function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nexport function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nexport function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener\n}\n", "import {\n    isStopped,\n    setCurrentTarget,\n    setEventPhase,\n    setPassiveListener,\n    wrapEvent,\n} from \"./event.mjs\"\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap()\n\n// Listener types\nconst CAPTURE = 1\nconst BUBBLE = 2\nconst ATTRIBUTE = 3\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget)\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this)\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this)\n\n            // Traverse to the tail while removing old value.\n            let prev = null\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next)\n                    } else {\n                        listeners.delete(eventName)\n                    }\n                } else {\n                    prev = node\n                }\n\n                node = node.next\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                }\n                if (prev === null) {\n                    listeners.set(eventName, newNode)\n                } else {\n                    prev.next = newNode\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    )\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this)\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    })\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i])\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map())\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length)\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i]\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this)\n        const optionsIsObj = isObject(options)\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        }\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName)\n        if (node === undefined) {\n            listeners.set(eventName, newNode)\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node\n            node = node.next\n        }\n\n        // Add it.\n        prev.next = newNode\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this)\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n\n        let prev = null\n        let node = listeners.get(eventName)\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n                return\n            }\n\n            prev = node\n            node = node.next\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this)\n        const eventName = event.type\n        let node = listeners.get(eventName)\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event)\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n            } else {\n                prev = node\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            )\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent)\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err)\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent)\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next\n        }\n        setPassiveListener(wrappedEvent, null)\n        setEventPhase(wrappedEvent, 0)\n        setCurrentTarget(wrappedEvent, null)\n\n        return !wrappedEvent.defaultPrevented\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype)\n}\n\nexport { defineEventAttribute, EventTarget }\nexport default EventTarget\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { Builder } from './builder/index';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './io/whatwg/iterable';\nimport { builderThroughDOMStream } from './io/whatwg/builder';\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nBuilder['throughDOM'] = builderThroughDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util,\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './Arrow';\n", "/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Table, Type } from \"apache-arrow\";\nvar ArrowTable = /** @class */ (function () {\n    function ArrowTable(dataBuffer, indexBuffer, columnsBuffer, styler) {\n        var _this = this;\n        this.getCell = function (rowIndex, columnIndex) {\n            var isBlankCell = rowIndex < _this.headerRows && columnIndex < _this.headerColumns;\n            var isIndexCell = rowIndex >= _this.headerRows && columnIndex < _this.headerColumns;\n            var isColumnsCell = rowIndex < _this.headerRows && columnIndex >= _this.headerColumns;\n            if (isBlankCell) {\n                var classNames = [\"blank\"];\n                if (columnIndex > 0) {\n                    classNames.push(\"level\" + rowIndex);\n                }\n                return {\n                    type: \"blank\",\n                    classNames: classNames.join(\" \"),\n                    content: \"\"\n                };\n            }\n            else if (isColumnsCell) {\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"col_heading\",\n                    \"level\" + rowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                return {\n                    type: \"columns\",\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.columnsTable, dataColumnIndex, rowIndex)\n                };\n            }\n            else if (isIndexCell) {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var classNames = [\n                    \"row_heading\",\n                    \"level\" + columnIndex,\n                    \"row\" + dataRowIndex\n                ];\n                return {\n                    type: \"index\",\n                    id: \"T_\" + _this.uuid + \"level\" + columnIndex + \"_row\" + dataRowIndex,\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.indexTable, dataRowIndex, columnIndex)\n                };\n            }\n            else {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"data\",\n                    \"row\" + dataRowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                var content = _this.styler\n                    ? _this.getContent(_this.styler.displayValuesTable, dataRowIndex, dataColumnIndex)\n                    : _this.getContent(_this.dataTable, dataRowIndex, dataColumnIndex);\n                return {\n                    type: \"data\",\n                    id: \"T_\" + _this.uuid + \"row\" + dataRowIndex + \"_col\" + dataColumnIndex,\n                    classNames: classNames.join(\" \"),\n                    content: content\n                };\n            }\n        };\n        this.getContent = function (table, rowIndex, columnIndex) {\n            var column = table.getColumnAt(columnIndex);\n            if (column === null) {\n                return \"\";\n            }\n            var columnTypeId = _this.getColumnTypeId(table, columnIndex);\n            switch (columnTypeId) {\n                case Type.Timestamp: {\n                    return _this.nanosToDate(column.get(rowIndex));\n                }\n                default: {\n                    return column.get(rowIndex);\n                }\n            }\n        };\n        this.dataTable = Table.from(dataBuffer);\n        this.indexTable = Table.from(indexBuffer);\n        this.columnsTable = Table.from(columnsBuffer);\n        this.styler = styler\n            ? {\n                caption: styler.caption,\n                displayValuesTable: Table.from(styler.displayValues),\n                styles: styler.styles,\n                uuid: styler.uuid\n            }\n            : undefined;\n    }\n    Object.defineProperty(ArrowTable.prototype, \"rows\", {\n        get: function () {\n            return this.indexTable.length + this.columnsTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columns\", {\n        get: function () {\n            return this.indexTable.numCols + this.columnsTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerRows\", {\n        get: function () {\n            return this.rows - this.dataRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerColumns\", {\n        get: function () {\n            return this.columns - this.dataColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataRows\", {\n        get: function () {\n            return this.dataTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataColumns\", {\n        get: function () {\n            return this.dataTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"uuid\", {\n        get: function () {\n            return this.styler && this.styler.uuid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"caption\", {\n        get: function () {\n            return this.styler && this.styler.caption;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"styles\", {\n        get: function () {\n            return this.styler && this.styler.styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"table\", {\n        get: function () {\n            return this.dataTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"index\", {\n        get: function () {\n            return this.indexTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columnTable\", {\n        get: function () {\n            return this.columnsTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Serialize arrow table.\n     */\n    ArrowTable.prototype.serialize = function () {\n        return {\n            data: this.dataTable.serialize(),\n            index: this.indexTable.serialize(),\n            columns: this.columnsTable.serialize()\n        };\n    };\n    /**\n     * Returns apache-arrow specific typeId of column.\n     */\n    ArrowTable.prototype.getColumnTypeId = function (table, columnIndex) {\n        return table.schema.fields[columnIndex].type.typeId;\n    };\n    ArrowTable.prototype.nanosToDate = function (nanos) {\n        return new Date(nanos / 1e6);\n    };\n    return ArrowTable;\n}());\nexport { ArrowTable };\n", "/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\";\nimport { ArrowTable } from \"./ArrowTable\";\n/** Messages from Component -> Streamlit */\nvar ComponentMessageType;\n(function (ComponentMessageType) {\n    // A component sends this message when it's ready to receive messages\n    // from Streamlit. Streamlit won't send any messages until it gets this.\n    // Data: { apiVersion: number }\n    ComponentMessageType[\"COMPONENT_READY\"] = \"streamlit:componentReady\";\n    // The component has a new widget value. Send it back to Streamlit, which\n    // will then re-run the app.\n    // Data: { value: any }\n    ComponentMessageType[\"SET_COMPONENT_VALUE\"] = \"streamlit:setComponentValue\";\n    // The component has a new height for its iframe.\n    // Data: { height: number }\n    ComponentMessageType[\"SET_FRAME_HEIGHT\"] = \"streamlit:setFrameHeight\";\n})(ComponentMessageType || (ComponentMessageType = {}));\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nvar Streamlit = /** @class */ (function () {\n    function Streamlit() {\n    }\n    /**\n     * The Streamlit component API version we're targetting.\n     * There's currently only 1!\n     */\n    Streamlit.API_VERSION = 1;\n    Streamlit.RENDER_EVENT = \"streamlit:render\";\n    /** Dispatches events received from Streamlit. */\n    Streamlit.events = new EventTarget();\n    Streamlit.registeredMessageListener = false;\n    /**\n     * Tell Streamlit that the component is ready to start receiving data.\n     * Streamlit will defer emitting RENDER events until it receives the\n     * COMPONENT_READY message.\n     */\n    Streamlit.setComponentReady = function () {\n        if (!Streamlit.registeredMessageListener) {\n            // Register for message events if we haven't already\n            window.addEventListener(\"message\", Streamlit.onMessageEvent);\n            Streamlit.registeredMessageListener = true;\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n            apiVersion: Streamlit.API_VERSION\n        });\n    };\n    /**\n     * Report the component's height to Streamlit.\n     * This should be called every time the component changes its DOM - that is,\n     * when it's first loaded, and any time it updates.\n     */\n    Streamlit.setFrameHeight = function (height) {\n        if (height === undefined) {\n            // `height` is optional. If undefined, it defaults to scrollHeight,\n            // which is the entire height of the element minus its border,\n            // scrollbar, and margin.\n            height = document.body.scrollHeight;\n        }\n        if (height === Streamlit.lastFrameHeight) {\n            // Don't bother updating if our height hasn't changed.\n            return;\n        }\n        Streamlit.lastFrameHeight = height;\n        Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height: height });\n    };\n    /**\n     * Set the component's value. This value will be returned to the Python\n     * script, and the script will be re-run.\n     *\n     * For example:\n     *\n     * JavaScript:\n     * Streamlit.setComponentValue(\"ahoy!\")\n     *\n     * Python:\n     * value = st.my_component(...)\n     * st.write(value) # -> \"ahoy!\"\n     *\n     * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be\n     * serializable to JSON.\n     */\n    Streamlit.setComponentValue = function (value) {\n        var dataType;\n        if (value instanceof ArrowTable) {\n            dataType = \"dataframe\";\n            value = value.serialize();\n        }\n        else if (isTypedArray(value)) {\n            // All typed arrays get sent as Uint8Array, because that's what our\n            // protobuf library uses for the \"bytes\" field type.\n            dataType = \"bytes\";\n            value = new Uint8Array(value.buffer);\n        }\n        else if (value instanceof ArrayBuffer) {\n            dataType = \"bytes\";\n            value = new Uint8Array(value);\n        }\n        else {\n            dataType = \"json\";\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {\n            value: value,\n            dataType: dataType\n        });\n    };\n    /** Receive a ForwardMsg from the Streamlit app */\n    Streamlit.onMessageEvent = function (event) {\n        var type = event.data[\"type\"];\n        switch (type) {\n            case Streamlit.RENDER_EVENT:\n                Streamlit.onRenderMessage(event.data);\n                break;\n        }\n    };\n    /**\n     * Handle an untyped Streamlit render event and redispatch it as a\n     * StreamlitRenderEvent.\n     */\n    Streamlit.onRenderMessage = function (data) {\n        var args = data[\"args\"];\n        if (args == null) {\n            console.error(\"Got null args in onRenderMessage. This should never happen\");\n            args = {};\n        }\n        // Parse our dataframe arguments with arrow, and merge them into our args dict\n        var dataframeArgs = data[\"dfs\"] && data[\"dfs\"].length > 0\n            ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n            : {};\n        args = __assign(__assign({}, args), dataframeArgs);\n        var disabled = Boolean(data[\"disabled\"]);\n        var theme = data[\"theme\"];\n        if (theme) {\n            _injectTheme(theme);\n        }\n        // Dispatch a render event!\n        var eventData = { disabled: disabled, args: args, theme: theme };\n        var event = new CustomEvent(Streamlit.RENDER_EVENT, {\n            detail: eventData\n        });\n        Streamlit.events.dispatchEvent(event);\n    };\n    Streamlit.argsDataframeToObject = function (argsDataframe) {\n        var argsDataframeArrow = argsDataframe.map(function (_a) {\n            var key = _a.key, value = _a.value;\n            return [key, Streamlit.toArrowTable(value)];\n        });\n        return Object.fromEntries(argsDataframeArrow);\n    };\n    Streamlit.toArrowTable = function (df) {\n        var _a = df.data, data = _a.data, index = _a.index, columns = _a.columns, styler = _a.styler;\n        return new ArrowTable(data, index, columns, styler);\n    };\n    /** Post a message to the Streamlit app. */\n    Streamlit.sendBackMsg = function (type, data) {\n        window.parent.postMessage(__assign({ isStreamlitMessage: true, type: type }, data), \"*\");\n    };\n    return Streamlit;\n}());\nexport { Streamlit };\nvar _injectTheme = function (theme) {\n    var style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    style.innerHTML = \"\\n    :root {\\n      --primary-color: \" + theme.primaryColor + \";\\n      --background-color: \" + theme.backgroundColor + \";\\n      --secondary-background-color: \" + theme.secondaryBackgroundColor + \";\\n      --text-color: \" + theme.textColor + \";\\n      --font: \" + theme.font + \";\\n    }\\n\\n    body {\\n      background-color: var(--background-color);\\n      color: var(--text-color);\\n    }\\n  \";\n};\n/** True if the value is a TypedArray. */\nfunction isTypedArray(value) {\n    var isBigIntArray = false;\n    try {\n        isBigIntArray =\n            value instanceof BigInt64Array || value instanceof BigUint64Array;\n    }\n    catch (e) {\n        // Ignore cause Safari does not support this\n        // https://caniuse.com/mdn-javascript_builtins_bigint64array\n    }\n    return (value instanceof Int8Array ||\n        value instanceof Uint8Array ||\n        value instanceof Uint8ClampedArray ||\n        value instanceof Int16Array ||\n        value instanceof Uint16Array ||\n        value instanceof Int32Array ||\n        value instanceof Uint32Array ||\n        value instanceof Float32Array ||\n        value instanceof Float64Array ||\n        isBigIntArray);\n}\n"],
  "mappings": "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",
  "names": ["hoistNonReactStatics", "TextDecoder", "TextEncoder", "TextDecoder", "TextEncoder", "source", "events", "err", "org", "apache", "arrow", "flatbuf", "MetadataVersion", "UnionMode", "Precision", "DateUnit", "TimeUnit", "IntervalUnit", "Type", "Endianness", "Null", "List", "FixedSizeList", "Map", "Union", "Int", "Utf8", "Binary", "FixedSizeBinary", "Bool", "Decimal", "Date", "Time", "Timestamp", "Interval", "Field", "Buffer", "Schema", "org", "apache", "arrow", "flatbuf", "MessageHeader", "RecordBatch", "Message", "Type", "BufferType", "Visitor", "DataType", "Null", "Int8", "Int16", "Int32", "Int64", "Uint8", "Uint16", "Uint32", "Uint64", "Float", "Float16", "Float32", "Float64", "Binary", "Utf8", "Bool", "Decimal", "Date_", "DateDay", "DateMillisecond", "TimeSecond", "TimeMillisecond", "TimeMicrosecond", "TimeNanosecond", "TimestampSecond", "TimestampMillisecond", "TimestampMicrosecond", "TimestampNanosecond", "IntervalDayTime", "IntervalYearMonth", "List", "Struct", "DenseUnion", "SparseUnion", "FixedSizeBinary", "FixedSizeList", "Map_", "Dictionary", "Data", "byteLength", "Builder", "size", "BoolBuilder", "NullBuilder", "DateBuilder", "DateDayBuilder", "DateMillisecondBuilder", "DecimalBuilder", "DictionaryBuilder", "FixedSizeBinaryBuilder", "FloatBuilder", "Float16Builder", "Float32Builder", "Float64Builder", "IntBuilder", "Int8Builder", "Int16Builder", "Int32Builder", "Int64Builder", "Uint8Builder", "Uint16Builder", "Uint32Builder", "Uint64Builder", "TimeBuilder", "TimeSecondBuilder", "TimeMillisecondBuilder", "TimeMicrosecondBuilder", "TimeNanosecondBuilder", "TimestampBuilder", "TimestampSecondBuilder", "TimestampMillisecondBuilder", "TimestampMicrosecondBuilder", "TimestampNanosecondBuilder", "IntervalBuilder", "IntervalDayTimeBuilder", "IntervalYearMonthBuilder", "BinaryBuilder", "Utf8Builder", "Chunked", "nullCount", "Column", "i", "Schema", "Field", "ListBuilder", "FixedSizeListBuilder", "MapBuilder", "StructBuilder", "UnionBuilder", "SparseUnionBuilder", "DenseUnionBuilder", "type", "org", "apache", "arrow", "flatbuf", "Builder", "AsyncByteQueue", "ByteStream", "AsyncByteStream", "Uint64", "Int64", "Null", "Int", "Binary", "Bool", "Utf8", "Decimal", "Date", "Time", "Timestamp", "Interval", "List", "Struct", "Union", "FixedSizeBinary", "FixedSizeList", "Map_", "Builder", "Type", "Message", "RecordBatch", "MessageReader", "AsyncMessageReader", "JSONMessageReader", "RecordBatchWriter", "RecordBatchStreamWriter", "RecordBatchFileWriter", "RecordBatchJSONWriter", "BaseVector", "BinaryVector", "BoolVector", "DateVector", "DateDayVector", "DateMillisecondVector", "DecimalVector", "DictionaryVector", "FixedSizeBinaryVector", "FixedSizeListVector", "FloatVector", "ArrowType", "Float16Vector", "Float32Vector", "Float64Vector", "IntervalVector", "IntervalDayTimeVector", "IntervalYearMonthVector", "IntVector", "ArrowType", "Int8Vector", "Int16Vector", "Int32Vector", "Int64Vector", "Uint8Vector", "Uint16Vector", "Uint32Vector", "Uint64Vector", "ListVector", "MapVector", "NullVector", "StructVector", "TimestampVector", "TimestampSecondVector", "TimestampMillisecondVector", "TimestampMicrosecondVector", "TimestampNanosecondVector", "TimeVector", "TimeSecondVector", "TimeMillisecondVector", "TimeMicrosecondVector", "TimeNanosecondVector", "UnionVector", "DenseUnionVector", "SparseUnionVector", "Utf8Vector", "fn", "Table", "reader", "indices", "oldToNew", "RecordBatch", "RecordBatchReader", "RecordBatchStreamReader", "AsyncRecordBatchStreamReader", "RecordBatchFileReader", "AsyncRecordBatchFileReader", "toDOMStream", "it", "builderThroughDOMStream", "recordBatchReaderThroughDOMStream", "reader", "recordBatchWriterThroughDOMStream", "batch", "col", "lit", "DataFrame", "predicate", "FilteredDataFrame", "CountByResult", "predicate", "CustomEvent", "import_builder", "import_reader", "import_writer", "streamAdapters", "ArrowTable", "ComponentMessageType", "Streamlit", "d", "b", "StreamlitComponentBase", "React", "ComponentWrapper", "React", "hoistNonReactStatics"]
}
